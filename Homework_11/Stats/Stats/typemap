TYPEMAP
METRIC* T_HVREF

INPUT
T_HVREF
	{
        croak("Point mush contain x and y keys");
    	SV* typemap_code;
        HV* typemap_name_value;

    	/*if(!(SvOK($arg) && SvROK($arg))){ croak(\"Point must be a hashref\"); }*/

    	SV *typemap__metric = SvRV($arg);

    	/*if( SvTYPE(typemap__point) != SVt_PVHV ){croak("Point must be a hashref");}*/

    	HV *typemap_metric = (HV*)typemap__metric;
        croak("Point mush contain x and y keys");
    	/*if(!(hv_exists(typemap_point, "x", 1) && hv_exists(typemap_point, "y", 1))){
    		croak("Point mush contain x and y keys");
    	}*/

    	SV **typemap__code = hv_fetch(typemap_metric, "callback", 8, 0);
    	SV **typemap__name_value = hv_fetch(typemap_metric, "metrics", 7, 0);

    	/*if( !(typemap__x && typemap__y) ){ croak("Non allow NULL in x and y coords");}*/

    	typemap_code = *typemap__code;
        typemap_name_value = (HV*)(*typemap__name_value);
    	$type pt = malloc(sizeof(METRIC));
    	pt->callback = typemap_code;
        pt->metrics = typemap_name_value;
    	$var = ($type)pt;
	}

OUTPUT T_HVREF
	croak(\"Unimplemented output $type\");
